<?xml version="1.0"?>
<!DOCTYPE bindings SYSTEM "chrome://consolelogger/locale/options.dtd">
<bindings id="consoleLogger-bindings"
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="consoleLoggerItem" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
		<content>
			<children />
			<xul:grid flex="1">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
				</xul:columns>
				<xul:rows>
					<xul:row align="center" class="cl-row-main">
						<xul:label class="cl-label" value="&cl.name;" tooltiptext="&cl.nameTip;" />
						<xul:hbox align="center">
							<xul:textbox anonid="name" class="cl-textbox" flex="1" />
							<xul:button anonid="open" class="cl-small" disabled="true" label="&cl.log;"
								oncommand="document.getBindingParent(this).open();"
								onmouseover="document.getBindingParent(this).updateLogTip();" />
							<xul:checkbox anonid="enabled" class="cl-enabled" label="&cl.enabled;"
								oncommand="document.getBindingParent(this).updateState();" />
						</xul:hbox>
					</xul:row>
					<xul:row align="center" class="cl-row-detail">
						<xul:label class="cl-label" value="&cl.sourcePattern;" tooltiptext="&cl.sourcePatternTip;" />
						<xul:textbox anonid="source" class="cl-textbox" flex="1" />
					</xul:row>
					<xul:row align="center" class="cl-row-detail">
						<xul:label class="cl-label" value="&cl.messagePattern;" tooltiptext="&cl.messagePatternTip;" />
						<xul:textbox anonid="message" class="cl-textbox" flex="1" />
					</xul:row>
					<xul:row align="center" class="cl-row-detail">
						<xul:label class="cl-label" value="&cl.excludePattern;" tooltiptext="&cl.excludePatternTip;" />
						<xul:textbox anonid="exclude" class="cl-textbox" flex="1" />
					</xul:row>
				</xul:rows>
			</xul:grid>
		</content>
		<implementation implements="nsIDOMEventListener">
			<constructor>
				this._elts = { __proto__: null };
				var nameBox = this.getItem("name");
				nameBox.addEventListener("keypress", this, false);
				nameBox.addEventListener("input", this, false);
				if("ondrop" in nameBox) // Firefox 4+
					nameBox.addEventListener("drop", this, false);
				else {
					nameBox.addEventListener("dragexit", this, false);
					nameBox.addEventListener("dragend", this, false);
				}
			</constructor>
			<destructor>
				var nameBox = this.getItem("name");
				nameBox.removeEventListener("keypress", this, false);
				nameBox.removeEventListener("input",    this, false);
				nameBox.removeEventListener("drop",     this, false);
				nameBox.removeEventListener("dragexit", this, false);
				nameBox.removeEventListener("dragend",  this, false);
			</destructor>
			<method name="handleEvent">
				<parameter name="event" />
				<body>
					if(event.currentTarget.getAttribute("anonid") == "name")
						this.validateName(event);
				</body>
			</method>
			<field name="clo">consoleLoggerOptions</field>
			<field name="params">["name", "enabled", "source", "message", "exclude"]</field>
			<method name="getItem">
				<parameter name="anonId" />
				<body>
					return this._elts[anonId] || (
						this._elts[anonId] = this.ownerDocument.getAnonymousElementByAttribute(this, "anonid", anonId)
					);
				</body>
			</method>
			<field name="originalName">undefined</field>
			<property name="name"
				onget="return this.getItem('name').value;"
				onset="this.getItem('name').value = val;" />
			<property name="enabled"
				onget="return this.getItem('enabled').checked;"
				onset="this.getItem('enabled').checked = val; this.updateState();" />
			<property name="locked"
				onget="return this.getItem('name').disabled;"
				onset="this.getItem('name').disabled = val;" />
			<property name="canOpen">
				<getter>
					return !this.getItem("open").disabled;
				</getter>
				<setter>
					this.getItem("open").disabled = !val;
					this.setAttribute("cl_canOpen", !!val);
					if(!val)
						this.markAsRead();
				</setter>
			</property>
			<property name="isOldChanges">
				<getter>
					return /(?:^|\s)cl-old(?:\s|$)/.test(this.getItem("open").className);
				</getter>
				<setter>
					this.getItem("open").className = val ? "cl-small cl-old" : "cl-small";
					this.setAttribute("cl_isOldChanges", !!val);
				</setter>
			</property>
			<property name="searchLabel" readonly="true" onget="return this.name;" />
			<property name="state">
				<getter>
					var state = { __proto__: null };
					this.params.forEach(function(name) {
						var elt = this.getItem(name);
						state[name] = "checked" in elt ? elt.checked : elt.value;
					}, this);
					state.locked = this.locked;
					state.originalName = this.originalName;
					return state;
				</getter>
				<setter>
				<![CDATA[
					var state = val;
					for(var name in state) if(Object.hasOwnProperty.call(state, name)) {
						var elt = this.getItem(name);
						if(!elt)
							continue;
						if("checked" in elt)
							elt.checked = state[name];
						else {
							var v = state[name];
							if(name == "name" && !this.isValidName(v)) {
								v = this.fixName(v);
								this.showTip(elt, this.onlyASCII, true);
							}
							elt.value = v;
						}
					}
					this.locked = "locked" in state && state.locked;
					this.originalName = state.originalName || undefined;
					this.updateState();
				]]>
				</setter>
			</property>
			<method name="updateState">
				<body>
					if(this.enabled)
						this.removeAttribute("cl_disabled");
					else
						this.setAttribute("cl_disabled", "true");
				</body>
			</method>
			<method name="focusItem">
				<parameter name="itemName" />
				<body>
					var field = this.getItem(itemName || "name").inputField;
					field.focus();
					field.select();
				</body>
			</method>
			<method name="validateItem">
				<parameter name="itemName" />
				<parameter name="validator" />
				<body>
					var item = this.getItem(itemName);
					var error = validator(item.value);
					if(error) {
						item.setAttribute("cl_invalidData", "true");
						item.setAttribute("tooltiptext", error);
						this.showTip(item, error);
					}
					else {
						item.removeAttribute("cl_invalidData");
						item.removeAttribute("tooltiptext");
					}
					return !error;
				</body>
			</method>
			<method name="setFilter">
				<parameter name="matcher" />
				<body>
				<![CDATA[
					var matched = false;
					this.params.forEach(function(name) {
						var elt = this.getItem(name);
						if("checked" in elt)
							return;
						if(matcher && matcher(elt.value))
							elt.setAttribute("cl_highlight", "true"), matched = true;
						else
							elt.removeAttribute("cl_highlight");
					}, this);
					if(matched)
						this.setAttribute("cl_highlight", "true");
					else
						this.removeAttribute("cl_highlight");
					return matched;
				]]>
				</body>
			</method>
			<field name="_checkNameTimer">0</field>
			<method name="validateName">
				<parameter name="event" />
				<body>
				<![CDATA[
					var nameBox = event.currentTarget;
					if(event.type == "keypress") {
						var key = event.charCode || 0;
						if(
							key >= 0 && key <= 127 // US-ASCII (includes control characters)
							|| event.ctrlKey || event.altKey || event.metaKey // Some hotkey
						)
							return;
						event.preventDefault();
						this.showTip(nameBox, this.onlyASCII);
						return;
					}
					// Wait for changes (and don't call too often)
					clearTimeout(this._checkNameTimer);
					this._checkNameTimer = setTimeout(function(_this) {
						_this.checkName(nameBox);
					}, 0, this);
				]]>
				</body>
			</method>
			<method name="checkName">
				<parameter name="nameBox" />
				<body>
				<![CDATA[
					var nameField = nameBox.inputField;
					var curVal = nameField.value;
					if(this.isValidName(curVal))
						return;
					try {
						var editor = nameField
							.QueryInterface(Components.interfaces.nsIDOMNSEditableElement)
							.editor
							.QueryInterface(Components.interfaces.nsIEditor);
						var undoEnabled = { value: false };
						var canUndo = { value: false };
						editor.canUndo(undoEnabled, canUndo);
						if(!undoEnabled.value || !canUndo.value)
							throw new Error("nsIEditor: can't undo");
						editor.undo(1);
						var sc = editor.selectionController;
						sc.scrollSelectionIntoView(
							sc.SELECTION_NORMAL,
							sc.SELECTION_ANCHOR_REGION,
							true
						);
					}
					catch(e) {
						Components.utils.reportError(e);
						var ss = this.fixName(curVal.substr(0, nameField.selectionStart)).length;
						var se = this.fixName(curVal.substr(0, nameField.selectionEnd)).length;
						nameField.value = this.fixName(curVal);
						nameField.selectionStart = ss;
						nameField.selectionEnd = se;
					}
					this.showTip(nameBox, this.onlyASCII);
				]]>
				</body>
			</method>
			<method name="isValidName">
				<parameter name="name" />
				<body>
					return !/[^\x20-\x7e]/.test(name);
				</body>
			</method>
			<method name="fixName">
				<parameter name="name" />
				<body>
					return name.replace(/[^\x20-\x7e]+/g, "");
				</body>
			</method>
			<field name="onlyASCII">"&cl.onlyASCII;"</field>
			<method name="showTip">
				<body>
					// Wait for UI changes
					setTimeout(function(_this, args) {
						_this._showTip.apply(_this, args);
					}, 0, this, arguments);
				</body>
			</method>
			<method name="_showTip">
				<parameter name="nameBox" />
				<parameter name="message" />
				<parameter name="highlight" />
				<body>
				<![CDATA[
					var tt = document.createElement("tooltip");
					tt.className = "cl-tip";
					tt.style.margin = 0;
					tt.setAttribute("label", message);
					tt.setAttribute("onpopuphidden", "this.parentNode.removeChild(this);");
					document.documentElement.appendChild(tt);
					highlight && nameBox.setAttribute("cl_invalidUsage", "true");
					var bo = nameBox.boxObject;
					var x = bo.screenX;
					var y = bo.screenY + bo.height + 2;
					var win = this.ownerDocument.defaultView;
					var ttHeight = 28; // We don't know actual height of not yet displayed tooltip
					x = Math.min(Math.max(x, win.screenX, 0), win.screenX + win.outerWidth);
					y = Math.min(Math.max(y, win.screenY, 0), win.screenY + win.outerHeight - ttHeight);
					if("openPopupAtScreen" in tt) // Firefox 3.0+
						tt.openPopupAtScreen(x, y, false /*isContextMenu*/);
					else
						tt.showPopup(nameBox, x, y, "tooltip", null, null);
					setTimeout(function() {
						highlight && nameBox.removeAttribute("cl_invalidUsage");
						tt.parentNode && tt.hidePopup();
					}, 1500);
				]]>
				</body>
			</method>
			<method name="open">
				<body>
					this.clo.open(this);
				</body>
			</method>
			<field name="_logDate">0</field>
			<method name="updateLogTip">
				<body>
					if(!this.canOpen) {
						this._logDate = 0;
						this.setLogTip("");
						return;
					}
					var date = this._logDate;
					if(date) // Will use cached value
						this.setLogTip(date);
					else {
						this.clo.getLogFileDate(this.name, function(date) {
							this._logDate = date;
							this.setLogTip(date);
						}, this);
					}
				</body>
			</method>
			<method name="setLogTip">
				<parameter name="date" />
				<body>
				<![CDATA[
					var tip = date && this.clo.formatDate(date);
					var btn = this.getItem("open");
					if(btn.tooltipText != tip)
						btn.tooltipText = tip;
				]]>
				</body>
			</method>
			<field name="_changes">0</field>
			<method name="markAsUpdated">
				<body>
					if(!this._changes) {
						this.canOpen = true;
						this.isOldChanges = false;
					}
					++this._changes;
					this.updateChangesCounter();
					this._logDate = 0;
				</body>
			</method>
			<method name="markAsRead">
				<body>
					if(this._changes) {
						this._changes = 0;
						this.updateChangesCounter();
					}
				</body>
			</method>
			<method name="updateChangesCounter">
				<body>
					var hasNew = this._changes > 0;
					var label = hasNew
						? "&cl.logs;".replace("$S", this._changes)
						: "&cl.log;";
					this.setAttribute("cl_hasNewChanges", hasNew);
					this.getItem("open").setAttribute("label", label);
				</body>
			</method>
		</implementation>
		<handlers>
			<handler event="mousedown" phase="capturing">
			<![CDATA[
				if(event.button != 0 || event.ctrlKey || event.altKey || event.shiftKey || event.metaKey)
					return;
				var control = this.control;
				if(!control || control.disabled || !control.hasAttribute("cl_clickToSelect"))
					return;

				event.stopPropagation();
				var _this = this;
				var trg = event.target;
				var win = this.ownerDocument.defaultView;
				win.addEventListener("mouseup", function onMouseUp(e) {
					win.removeEventListener(e.type, onMouseUp, true);
					if(e.target != trg)
						return;
					// Like "mousedown" handler from chrome://global/content/bindings/listbox.xml#listitem
					if(!_this.selected)
						control.selectItem(_this);
					control.currentItem = _this;
				}, true);
			]]>
			</handler>
		</handlers>
	</binding>
</bindings>