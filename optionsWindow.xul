<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://consolelogger/content/options.css" type="text/css"?>
<!DOCTYPE dialog SYSTEM "chrome://consolelogger/locale/options.dtd">
<dialog xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	id="consoleLoggerOptions"
	windowtype="consoleLogger:options"
	title="&cl.optionsTitle;"
	buttons="accept,cancel,extra1"
	buttonlabelextra1="&cl.apply;"
	onload="consoleLoggerOptions.init();"
	onunload="consoleLoggerOptions.destroy();"
	ondialogaccept="return consoleLoggerOptions.save();"
	ondialogextra1="consoleLoggerOptions.save();"
	oncommand="consoleLoggerOptions.checkUnsaved();"
	onchange="consoleLoggerOptions.checkUnsaved();"
	oninput="consoleLoggerOptions.checkUnsaved();"
	ondrop="consoleLoggerOptions.checkUnsaved();"
	oncut="consoleLoggerOptions.checkUnsaved();"
	width="640"
	height="480"
	persist="width height screenX screenY sizemode">
	<script type="application/javascript">
		var strings = {
			selfName:       "&cl.selfName;",
			emptyName:      "&cl.emptyName;",
			nameInternal:   "&cl.nameInternal;",
			nameUsed:       "&cl.nameUsed;",
			nameSimilar:    "&cl.nameSimilar;",
			dateTipTmpl:    "&cl.dateTipTmpl;",
			day:            "&cl.day;",
			exportTitle:    "&cl.exportTitle;",
			importTitle:    "&cl.importTitle;",
			errorTitle:     "&cl.errorTitle;",
			optionsFiles:   "&cl.optionsFiles;",
			jsonFiles:      "&cl.jsonFiles;",
			saveChanges:    "&cl.saveChanges;",
			removeLogs:     "&cl.removeLogs;",
			removeLogsAlso: "&cl.removeLogsAlso;",
			hasLog:         "&cl.hasLog;",
			removeConfirm:  "&cl.removeConfirm;",
			resetConfirm:   "&cl.resetConfirm;",
			viewerChoose:   "&cl.logViewerChoose;"
		};
	</script>
	<script type="application/javascript" src="chrome://consolelogger/content/options.js" />
	<html:link xmlns:html="http://www.w3.org/1999/xhtml" rel="shortcut icon" href="chrome://consolelogger/content/icon16.png" style="display: none;" />
	<hbox id="cl-filterBox" align="center">
		<label id="cl-filterLabel" control="cl-filter" value="&cl.filter;" cl_key="cl-key-search"
			ondblclick="if(event.button == 0) consoleLoggerOptions.updateFilter(1);" />
		<textbox id="cl-filter" type="search" timeout="250" flex="1"
			oncommand="consoleLoggerOptions.setFilter(this.value);" />
		<toolbarbutton id="cl-showDisabled" cl_key="cl-key-toggleShowDisabled" tooltiptext="&cl.showDisabled;"
			oncommand="
				var on = this.getAttribute('cl_checked') != 'true';
				this.setAttribute('cl_checked', on);
				consoleLoggerOptions.setShowDisabledMode(on);" />
		<checkbox id="cl-enabled" label="&cl.enabled;" oncommand="consoleLoggerOptions.enabled = this.checked;" />
	</hbox>
	<richlistbox id="cl-list" seltype="multiple" flex="1" context="cl-mp-context"
		onselect="consoleLoggerOptions.updateControls();"
		ondblclick="consoleLoggerOptions.onListDblClick(event);"
		onclick="if(event.target.localName == 'richlistitem' &amp;&amp; event.button == 1) consoleLoggerOptions.reset();" />
	<hbox id="cl-buttonsPanel" align="center" pack="center">
		<button id="cl-btn-add" cl_key="cl-key-add" icon="add" label="&cl.add;" oncommand="consoleLoggerOptions.add();" />
		<deck id="cl-deck-reset" cl_key="cl-key-remove" oncommand="consoleLoggerOptions.reset();">
			<button id="cl-btn-remove" icon="remove" label="&cl.remove;" />
			<button id="cl-btn-reset" icon="remove" label="&cl.reset;" />
		</deck>
		<button id="cl-btn-options" cl_key="cl-key-optionsMenu" label="&cl.options;" type="menu">
			<menupopup id="cl-mp-options" position="before_start"
				onpopupshowing="if(event.target == this) consoleLoggerOptions.updateContextMenu();">
				<menuitem id="cl-mi-opts-compact" key="cl-key-toggleCompact" type="checkbox" label="&cl.compactMode;"
					oncommand="consoleLoggerOptions.setCompactMode(this.getAttribute('checked') == 'true');" />
				<menuitem id="cl-mi-opts-showDisabled" key="cl-key-toggleShowDisabled" type="checkbox" label="&cl.showDisabled;"
					oncommand="consoleLoggerOptions.setShowDisabledMode(this.getAttribute('checked') == 'true');" />
				<menuitem id="cl-mi-opts-singleButtonsBar" type="checkbox" label="&cl.singleButtonsToolbar;"
					oncommand="consoleLoggerOptions.placeButtonsBar(this.getAttribute('checked') == 'true');" />
				<menuitem id="cl-mi-opts-openInTab" type="checkbox" label="&cl.openInTab;"
					oncommand="consoleLoggerOptions.setOpenInTab(this.getAttribute('checked') == 'true');" />
				<menu id="cl-mn-opts-logViewer" label="&cl.logViewer;">
					<menupopup onpopupshowing="consoleLoggerOptions.updateLogViewerMenu();"
						oncommand="consoleLoggerOptions.setLogViewer(event);">
						<menuitem id="cl-mi-opts-logViewer-default" type="radio" label="&cl.logViewerDefault;" />
						<menuitem id="cl-mi-opts-logViewer-viewSource" type="radio" label="&cl.logViewerViewSource;" />
						<menuitem id="cl-mi-opts-logViewer-extApp" type="radio" label="&cl.logViewerExtApp;" />
					</menupopup>
				</menu>
				<menuseparator id="cl-sep-opts-beforeReload" />
				<menuitem id="cl-mi-opts-reload" key="cl-key-reload" label="&cl.reload;" oncommand="consoleLoggerOptions.load();" />
				<menuseparator id="cl-sep-opts-beforeExport" />
				<menuitem id="cl-mi-opts-export" key="cl-key-export" label="&cl.exportSel;" oncommand="consoleLoggerOptions.exportToFile();" />
				<menuitem id="cl-mi-opts-exportVisible" key="cl-key-exportVisible" label="&cl.exportVisible;" oncommand="consoleLoggerOptions.exportToFile(-1);" />
				<menuitem id="cl-mi-opts-exportAll" key="cl-key-exportAll" label="&cl.exportAll;" oncommand="consoleLoggerOptions.exportToFile(1);" />
				<menuitem id="cl-mi-opts-import" key="cl-key-import" label="&cl.importAdd;" oncommand="consoleLoggerOptions.importFromFile();" />
				<menuitem id="cl-mi-opts-importOvr" key="cl-key-importOvr" label="&cl.importOvr;" oncommand="consoleLoggerOptions.importFromFile(true);" />
				<menuseparator id="cl-sep-opts-beforeAddForLogs" />
				<menuitem id="cl-mi-opts-addForLogs" label="&cl.addForLogs;" oncommand="consoleLoggerOptions.addForLogFiles();" />
				<menuseparator id="cl-sep-opts-beforeCopy" />
				<menuitem id="cl-mi-opts-cut" key="cl-key-cut" label="&cl.cut;" oncommand="consoleLoggerOptions.cut();" />
				<menuitem id="cl-mi-opts-copy" key="cl-key-copy" label="&cl.copy;" oncommand="consoleLoggerOptions.copy();" />
				<menuitem id="cl-mi-opts-copyVisible" key="cl-key-copyVisible" label="&cl.copyVisible;" oncommand="consoleLoggerOptions.copy(-1);" />
				<menuitem id="cl-mi-opts-copyAll" key="cl-key-copyAll" label="&cl.copyAll;" oncommand="consoleLoggerOptions.copy(1);" />
				<menuitem id="cl-mi-opts-paste" key="cl-key-paste" label="&cl.paste;" oncommand="consoleLoggerOptions.paste();" />
				<menuitem id="cl-mi-opts-pasteOvr" key="cl-key-pasteOvr" label="&cl.pasteOvr;" oncommand="consoleLoggerOptions.paste(true);" />
			</menupopup>
		</button>
	</hbox>
	<menupopup id="cl-mp-context" onpopupshowing="consoleLoggerOptions.updateContextMenu();">
		<menuitem id="cl-mi-add" key="cl-key-add" label="&cl.add;" oncommand="consoleLoggerOptions.add();" />
		<menuitem id="cl-mi-remove" key="cl-key-remove" label="&cl.remove;" oncommand="consoleLoggerOptions.reset();" />
		<menuitem id="cl-mi-reset" key="cl-key-remove" label="&cl.reset;" oncommand="consoleLoggerOptions.reset();" />
		<menuseparator id="cl-sep-beforeToggle" />
		<menuitem id="cl-mi-toggle" type="checkbox" key="cl-key-toggle" label="&cl.enabled;" oncommand="consoleLoggerOptions.toggle();" />
		<menuseparator id="cl-sep-beforeOpen" />
		<menuitem id="cl-mi-open" key="cl-key-open" label="&cl.openLog;" oncommand="consoleLoggerOptions.open();" />
		<menuitem id="cl-mi-clear" key="cl-key-clear" label="&cl.removeLog;" oncommand="consoleLoggerOptions.clear();" />
		<menuseparator id="cl-sep-beforeCopy" />
		<menuitem id="cl-mi-cut" key="cl-key-cut" label="&cl.cut;" oncommand="consoleLoggerOptions.cut();" />
		<menuitem id="cl-mi-copy" key="cl-key-copy" label="&cl.copy;" oncommand="consoleLoggerOptions.copy();" />
		<menuitem id="cl-mi-paste" key="cl-key-paste" label="&cl.paste;" oncommand="consoleLoggerOptions.paste();" />
		<menuseparator id="cl-sep-beforeSelectAll" />
		<menuitem id="cl-mi-selectAll" key="cl-key-selectAll" label="&cl.selectAll;" oncommand="consoleLoggerOptions.list.selectAll();" />
		<menuitem id="cl-mi-invertSelection" key="cl-key-invertSelection" label="&cl.invertSelection;" oncommand="consoleLoggerOptions.list.invertSelection();" />
	</menupopup>
	<keyset>
		<key id="cl-key-add" keycode="VK_INSERT" oncommand="consoleLoggerOptions.add();" />
		<key id="cl-key-add2" keycode="VK_INSERT" modifiers="alt" oncommand="consoleLoggerOptions.add();" />
		<key id="cl-key-add3" keycode="VK_F7" oncommand="consoleLoggerOptions.add();" />
		<key id="cl-key-remove" keycode="VK_DELETE" oncommand="consoleLoggerOptions.reset();" />
		<key id="cl-key-remove2" keycode="VK_DELETE" modifiers="alt" oncommand="consoleLoggerOptions.reset();" />
		<key id="cl-key-remove3" keycode="VK_F8" oncommand="consoleLoggerOptions.reset();" />
		<key id="cl-key-toggle" key="E" modifiers="accel" oncommand="consoleLoggerOptions.toggle();" />
		<key id="cl-key-toggle2" key=" " oncommand="
			if(document.commandDispatcher.focusedElement.localName == 'richlistbox')
				consoleLoggerOptions.toggle();" />
		<key id="cl-key-open" key="O" modifiers="accel" oncommand="consoleLoggerOptions.open();" />
		<key id="cl-key-clear" key="W" modifiers="accel" oncommand="consoleLoggerOptions.clear();" />
		<key id="cl-key-cut" key="X" modifiers="accel,shift" oncommand="consoleLoggerOptions.cut();" />
		<key id="cl-key-copy2" key="X" modifiers="accel" oncommand="consoleLoggerOptions.cut();" />
		<key id="cl-key-copy3" keycode="VK_DELETE" modifiers="shift" oncommand="consoleLoggerOptions.cut();" />
		<key id="cl-key-copy" key="C" modifiers="accel,shift" oncommand="consoleLoggerOptions.copy();" />
		<key id="cl-key-copy2" key="C" modifiers="accel" oncommand="consoleLoggerOptions.copy();" />
		<key id="cl-key-copy3" keycode="VK_INSERT" modifiers="accel" oncommand="consoleLoggerOptions.copy();" />
		<key id="cl-key-copyVisible" key="C" modifiers="accel,alt,shift" oncommand="consoleLoggerOptions.copy(-1);" />
		<key id="cl-key-copyAll" key="C" modifiers="accel,alt" oncommand="consoleLoggerOptions.copy(1);" />
		<key id="cl-key-paste" key="V" modifiers="accel,shift" oncommand="consoleLoggerOptions.paste();" />
		<key id="cl-key-paste2" key="V" modifiers="accel" oncommand="consoleLoggerOptions.paste();" />
		<key id="cl-key-paste3" keycode="VK_INSERT" modifiers="shift" oncommand="consoleLoggerOptions.paste();" />
		<key id="cl-key-pasteOvr" key="V" modifiers="accel,alt" oncommand="consoleLoggerOptions.paste(true);" />
		<key id="cl-key-export" key="E" modifiers="accel,shift" oncommand="consoleLoggerOptions.exportToFile()" />
		<key id="cl-key-exportVisible" key="E" modifiers="accel,alt,shift" oncommand="consoleLoggerOptions.exportToFile(-1)" />
		<key id="cl-key-exportAll" key="E" modifiers="accel,alt" oncommand="consoleLoggerOptions.exportToFile(1);" />
		<key id="cl-key-import" key="I" modifiers="accel,shift" oncommand="consoleLoggerOptions.importFromFile();" />
		<key id="cl-key-importOvr" key="I" modifiers="accel,alt" oncommand="consoleLoggerOptions.importFromFile(true);" />
		<key id="cl-key-selectAll" key="A" modifiers="accel,shift" oncommand="consoleLoggerOptions.list.selectAll();" />
		<key id="cl-key-selectAll2" key="A" modifiers="accel" oncommand="consoleLoggerOptions.list.selectAll();" />
		<key id="cl-key-invertSelection" key="*" modifiers="control" oncommand="consoleLoggerOptions.list.invertSelection();" />
		<key id="cl-key-search" key="F" modifiers="accel" oncommand="consoleLoggerOptions.filter.focus();" />
		<key id="cl-key-toggleCompact" key="M" modifiers="accel" oncommand="consoleLoggerOptions.toggleCompactMode();" />
		<key id="cl-key-toggleShowDisabled" key="H" modifiers="accel" oncommand="consoleLoggerOptions.toggleShowDisabledMode();" />
		<key id="cl-key-save" key="S" modifiers="accel" oncommand="consoleLoggerOptions.save();" />
		<key id="cl-key-accept" keycode="VK_RETURN" modifiers="control" oncommand="document.documentElement.acceptDialog();" />
		<key id="cl-key-reload" keycode="VK_F5" oncommand="consoleLoggerOptions.load();" />
		<key id="cl-key-reload2" key="R" modifiers="accel" oncommand="consoleLoggerOptions.load();" />
		<key id="cl-key-maximizeWindow" keycode="VK_F10"
			oncommand="
				if('fullScreen' in window &amp;&amp; fullScreen)
					fullScreen = false;
				else if(windowState == STATE_MAXIMIZED)
					restore();
				else
					maximize();" />
		<key id="cl-key-fullScreen" keycode="VK_F11"
			oncommand="if('fullScreen' in window) fullScreen = !fullScreen; // Firefox 3.0+" />
		<key id="cl-key-optionsMenu" key="O" modifiers="accel,shift"
			oncommand="document.getElementById('cl-btn-options').open = true;" />
	</keyset>
</dialog>